# No she-bang because this is used by both zshrc and bashrc

# Start ssh-agent

if [ -z "$SSH_AUTH_SOCK" ]; then
   # Check for a currently running instance of the agent
   RUNNING_AGENT="`ps -ax | grep 'ssh-agent -s' | grep -v grep | wc -l | tr -d '[:space:]'`"
   if [ "$RUNNING_AGENT" = "0" ]; then
        # Launch a new instance of the agent
        ssh-agent -s &> $HOME/.ssh/ssh-agent
   fi
   eval `cat $HOME/.ssh/ssh-agent`
fi

### GPG #######################################################################

GPG_MY_PUBLIC_KEY_ID="58646927A6BC2736"
GPG_MY_SIGNING_KEY_ID="543EDC5938DB92F9!" # ! for subkey

# Apply signing key to git config
# https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key

git config --global user.signingkey "${GPG_MY_SIGNING_KEY_ID}"

# configure git to sign all commits by default
git config --global commit.gpgsign true

# GPG signing for WSL2 shell
# https://github.com/keybase/keybase-issues/issues/2798
export GPG_TTY=$(tty)

# function to encrypt
secret()
{
  output=~/"${1}".enc
  gpg --encrypt --armor --output "${output}" -r "${GPG_MY_PUBLIC_KEY_ID}" "${1}" \
  && echo "${1} -> ${output}"
}

encrypt()
{
  secret "${1}"
}

# function to decrypt
reveal()
{
  output=$(echo "${1}" | rev | cut -c5- | rev)
  gpg --decrypt --output ${output} "${1}" && echo "${1} -> ${output}"
}

decrypt()
{
  reveal "${1}"
}

# use base python environment
source ~/.venvs/base/bin/activate

alias ap=ansible-playbook
alias ar=ansible-rulebook
alias av=ansible-vault

