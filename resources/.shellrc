# No she-bang because this is used by both zshrc and bashrc

# ssh-agent needs to be in .bashrc or .zshrc directly or the ssh-add won't
# work. Something to do with environment variables but I didn't care to look
# into it
# https://unix.stackexchange.com/questions/351725/why-eval-the-output-of-ssh-agent 

### GPG #######################################################################

GPG_MY_PUBLIC_KEY_ID="58646927A6BC2736"
GPG_MY_SIGNING_KEY_ID="543EDC5938DB92F9!" # ! for subkey

# Apply signing key to git config
# https://docs.github.com/en/authentication/managing-commit-signature-verification/telling-git-about-your-signing-key

git config --global user.signingkey "${GPG_MY_SIGNING_KEY_ID}"

# configure git to sign all commits by default
git config --global commit.gpgsign true

# GPG signing for WSL2 shell
# https://github.com/keybase/keybase-issues/issues/2798
export GPG_TTY=$(tty)

# Using gpg in WSL2
# https://github.com/BlackReloaded/wsl2-ssh-pageant
# https://levelup.gitconnected.com/how-to-use-a-yubikey-in-wsl2-linux-on-windows-96f176518583

# SSH Socket
# Removing Linux SSH socket and replacing it by link to wsl2-ssh pageant

export SSH_AUTH_SOCK="$HOME/.ssh/agent.sock"
if ! ss -a | grep -q "$SSH_AUTH_SOCK"; then
  rm -f "$SSH_AUTH_SOCK"
  wsl2_ssh_pageant_bin="$HOME/.ssh/wsl2-ssh-pageant.exe"
  if test -x "$wsl2_ssh_pageant_bin"; then
    (setsid nohup socat UNIX-LISTEN:"$SSH_AUTH_SOCK,fork" EXEC:"$wsl2_ssh_pageant_bin" >/dev/null 2>&1 &)
  else
    echo >&2 "WARNING: $wsl2_ssh_pageant_bin is not executable."
  fi
  unset wsl2_ssh_pageant_bin
fi

# GPG Socket
# Removing Linux GPG Agent socket and replacing it by link to wsl2-ssh-pageant GPG socket
export GPG_AGENT_SOCK="$HOME/.gnupg/S.gpg-agent"
if ! ss -a | grep -q "$GPG_AGENT_SOCK"; then
  rm -rf "$GPG_AGENT_SOCK"
  wsl2_ssh_pageant_bin="$HOME/.ssh/wsl2-ssh-pageant.exe"
  config_path="C\:/Users/Ryan/AppData/Local/gnupg"
  if test -x "$wsl2_ssh_pageant_bin"; then
    (setsid nohup socat UNIX-LISTEN:"$GPG_AGENT_SOCK,fork" EXEC:"$wsl2_ssh_pageant_bin -gpgConfigBasepath ${config_path} -gpg S.gpg-agent" >/dev/null 2>&1 &)
  else
    echo >&2 "WARNING: $wsl2_ssh_pageant_bin is not executable."
  fi
  unset wsl2_ssh_pageant_bin
fi

# function to encrypt
secret()
{
  output=~/"${1}".enc
  gpg --encrypt --armor --output "${output}" -r "${GPG_MY_PUBLIC_KEY_ID}" "${1}" \
  && echo "${1} -> ${output}"
}

encrypt()
{
  secret "${1}"
}

# function to decrypt
reveal()
{
  output=$(echo "${1}" | rev | cut -c5- | rev)
  gpg --decrypt --output ${output} "${1}" && echo "${1} -> ${output}"
}

decrypt()
{
  reveal "${1}"
}

export PATH=${PATH}:${HOME}/bin

# use base python environment
source ~/.venvs/base/bin/activate

export KUBE_CONFIG_DIR="${HOME}/.kube"
export KUBE_CONFIG_COMPUTACENTER="${KUBE_CONFIG_DIR}/computacenter-config"

alias ap=ansible-playbook
alias ar=ansible-rulebook
alias av=ansible-vault
alias cc1="oc config --kubeconfig=${KUBE_CONFIG_COMPUTACENTER} use-context computacenter1"
alias cc2="oc config --kubeconfig=${KUBE_CONFIG_COMPUTACENTER} use-context computacenter2"

